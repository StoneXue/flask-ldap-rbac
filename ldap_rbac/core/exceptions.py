# -*- coding: utf-8 -*-
# https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81
from ldap_rbac.patched import Namespace, fields
from werkzeug.exceptions import BadRequest, ClientDisconnected, SecurityError, BadHost, \
    Unauthorized, Forbidden, NotFound, MethodNotAllowed, NotAcceptable, RequestTimeout, \
    Conflict, Gone, LengthRequired, InternalServerError


class FuseError(Exception):
    """POSIX Error Code"""
    def __init__(self, errno=None, msg=None, http_exception=None):
        self.errno = errno
        self.msg = msg
        if http_exception is None:
            http_exception = InternalServerError
        self.http_exception = http_exception


def fuse_error(errno, msg, http_exception=None):
    return FuseError(errno=errno, msg=msg, http_exception=http_exception)
    
EPERM = fuse_error(1, "Operation not permitted", http_exception=Forbidden)
ENOENT = fuse_error(2, "No such file or directory", http_exception=NotFound)
SRCH = fuse_error(3, "No such process")
EINTR = fuse_error(4, "Interrupted system call")
EIO = fuse_error(5, "I/O error")
ENXIO = fuse_error(6, "No such device or address", http_exception=NotFound)
E2BIG = fuse_error(7, "Arg list too long")
ENOEXEC = fuse_error(8, "Exec format error")
EBADF = fuse_error(9, "Bad file number")
ECHILD = fuse_error(10, "No child processes", http_exception=NotFound)
EAGAIN = fuse_error(11, "Try again")
ENOMEM = fuse_error(12, "Out of memory")
EACCES = fuse_error(13, "Permission denied", http_exception=Forbidden)
EFAULT = fuse_error(14, "Bad address", http_exception=BadHost)
ENOTBLK = fuse_error(15, "Block device required")
EBUSY = fuse_error(16, "Device or resource busy")
EEXIST = fuse_error(17, "File exists", http_exception=Conflict)
EXDEV = fuse_error(18, "Cross-device link")
ENODEV = fuse_error(19, "No such device", http_exception=NotFound)
ENOTDIR = fuse_error(20, "Not a directory", http_exception=Conflict)
EISDIR = fuse_error(21, "Is a directory", http_exception=Conflict)
EINVAL = fuse_error(22, "Invalid argument")
ENFILE = fuse_error(23, "File table overflow")
EMFILE = fuse_error(24, "Too many open files")
ENOTTY = fuse_error(25, "Not a typewriter")
ETXTBSY = fuse_error(26, "Text file busy")
EFBIG = fuse_error(27, "File too large")
ENOSPC = fuse_error(28, "No space left on device")
ESPIPE = fuse_error(29, "Illegal seek")
EROFS = fuse_error(30, "Read-only file system")
EMLINK = fuse_error(31, "Too many links")
EPIPE = fuse_error(32, "Broken pipe")
EDOM = fuse_error(33, "Math argument out of domain of func")
ERANGE = fuse_error(34, "Math result not representable")
EDEADLK = fuse_error(35, "Resource deadlock would occur")
ENAMETOOLONG = fuse_error(36, "File name too long")
ENOLCK = fuse_error(37, "No record locks available")
ENOSYS = fuse_error(38, "Function not implemented")
ENOTEMPTY = fuse_error(39, "Directory not empty")
ELOOP = fuse_error(40, "Too many symbolic links encountered")
EWOULDBLOCK = fuse_error(11, "Operation would block")
ENOMSG = fuse_error(42, "No message of desired type")
EIDRM = fuse_error(43, "Identifier removed")
ECHRNG = fuse_error(44, "Channel number out of range")
EL2NSYNC = fuse_error(45, "Level 2 not synchronized")
EL3HLT = fuse_error(46, "Level 3 halted")
EL3RST = fuse_error(47, "Level 3 reset")
ELNRNG = fuse_error(48, "Link number out of range")
EUNATCH = fuse_error(49, "Protocol driver not attached")
ENOCSI = fuse_error(50, "No CSI structure available")
EL2HLT = fuse_error(51, "Level 2 halted")
EBADE = fuse_error(52, "Invalid exchange")
EBADR = fuse_error(53, "Invalid request descriptor")
EXFULL = fuse_error(54, "Exchange full")
ENOANO = fuse_error(55, "No anode")
EBADRQC = fuse_error(56, "Invalid request code")
EBADSLT = fuse_error(57, "Invalid slot")
EDEADLOCK = fuse_error(35, "Resource deadlock would occur")
EBFONT = fuse_error(59, "Bad font file format")
ENOSTR = fuse_error(60, "Device not a stream")
ENODATA = fuse_error(61, "No data available")
ETIME = fuse_error(62, "Timer expired")
ENOSR = fuse_error(63, "Out of streams resources")
ENONET = fuse_error(64, "Machine is not on the network")
ENOPKG = fuse_error(65, "Package not installed")
EREMOTE = fuse_error(66, "Object is remote")
ENOLINK = fuse_error(67, "Link has been severed")
EADV = fuse_error(68, "Advertise error")
ESRMNT = fuse_error(69, "Srmount error")
ECOMM = fuse_error(70, "Communication error on send")
EPROTO = fuse_error(71, "Protocol error")
EMULTIHOP = fuse_error(72, "Multihop attempted")
EDOTDOT = fuse_error(73, "RFS specific error")
EBADMSG = fuse_error(74, "Not a data message")
EOVERFLOW = fuse_error(75, "Value too large for defined data type")
ENOTUNIQ = fuse_error(76, "Name not unique on network")
EBADFD = fuse_error(77, "File descriptor in bad state")
EREMCHG = fuse_error(78, "Remote address changed")
ELIBACC = fuse_error(79, "Can not access a needed shared library")
ELIBBAD = fuse_error(80, "Accessing a corrupted shared library")
ELIBSCN = fuse_error(81, ".lib section in a.out corrupted")
ELIBMAX = fuse_error(82, "Attempting to link in too many shared libraries")
ELIBEXEC = fuse_error(83, "Cannot exec a shared library directly")
EILSEQ = fuse_error(84, "Illegal byte sequence")
ERESTART = fuse_error(85, "Interrupted system call should be restarted")
ESTRPIPE = fuse_error(86, "Streams pipe error")
EUSERS = fuse_error(87, "Too many users")
ENOTSOCK = fuse_error(88, "Socket operation on non-socket")
EDESTADDRREQ = fuse_error(89, "Destination address required")
EMSGSIZE = fuse_error(90, "Message too long")
EPROTOTYPE = fuse_error(91, "Protocol wrong type for socket")
ENOPROTOOPT = fuse_error(92, "Protocol not available")
EPROTONOSUPPORT = fuse_error(93, "Protocol not supported")
ESOCKTNOSUPPORT = fuse_error(94, "Socket type not supported")
EOPNOTSUPP = fuse_error(95, "Operation not supported on transport endpoint")
EPFNOSUPPORT = fuse_error(96, "Protocol family not supported")
EAFNOSUPPORT = fuse_error(97, "Address family not supported by protocol")
EADDRINUSE = fuse_error(98, "Address already in use")
EADDRNOTAVAIL = fuse_error(99, "Cannot assign requested address")
ENETDOWN = fuse_error(100, "Network is down")
ENETUNREACH = fuse_error(101, "Network is unreachable")
ENETRESET = fuse_error(102, "Network dropped connection because of reset")
ECONNABORTED = fuse_error(103, "Software caused connection abort")
ECONNRESET = fuse_error(104, "Connection reset by peer")
ENOBUFS = fuse_error(105, "No buffer space available")
EISCONN = fuse_error(106, "Transport endpoint is already connected")
ENOTCONN = fuse_error(107, "Transport endpoint is not connected")
ESHUTDOWN = fuse_error(108, "Cannot send after transport endpoint shutdown")
ETOOMANYREFS = fuse_error(109, "Too many references: cannot splice")
ETIMEDOUT = fuse_error(110, "Connection timed out", http_exception=RequestTimeout)
ECONNREFUSED = fuse_error(111, "Connection refused")
EHOSTDOWN = fuse_error(112, "Host is down")
EHOSTUNREACH = fuse_error(113, "No route to host")
EALREADY = fuse_error(114, "Operation already in progress")
EINPROGRESS = fuse_error(115, "Operation now in progress")
ESTALE = fuse_error(116, "Stale NFS file handle")
EUCLEAN = fuse_error(117, "Structure needs cleaning")
ENOTNAM = fuse_error(118, "Not a XENIX named type file")
ENAVAIL = fuse_error(119, "No XENIX semaphores available")
EISNAM = fuse_error(120, "Is a named type file")
EREMOTEIO = fuse_error(121, "Remote I/O error")
EDQUOT = fuse_error(122, "Quota exceeded")
ENOMEDIUM = fuse_error(123, "No medium found", http_exception=NotFound)
EMEDIUMTYPE = fuse_error(124, "Wrong medium type")

# extended attributes support needs these...
ENOATTR = fuse_error(61, "No such attribute", http_exception=NotFound)
ENOTSUPP = fuse_error(524, "Operation is not supported", http_exception=BadRequest)
ENOUSER = fuse_error(525, "No such user or group", http_exception=NotFound)


class SecurityException(Exception):
    """Error occur in Authentication and Authorization"""
    def __init__(self, eid=None, msg=None, http_exception=None):
        self.eid = eid
        self.msg = msg
        if http_exception is None:
            http_exception = SecurityError
        self.http_exception = http_exception


def security_error(eid, msg=None, http_exception=None):
    return SecurityException(eid=eid, msg=msg, http_exception=http_exception)


# 100's - Configuration Errors
CONTEXT_NULL = security_error(101)
FT_MGR_CLASS_NOT_FOUND = security_error(103)
FT_MGR_INST_EXCEPTION = security_error(104)
FT_MGR_ILLEGAL_ACCESS = security_error(105)
FT_MGR_CLASS_NAME_NULL = security_error(106)
FT_CONFIG_NOT_FOUND = security_error(107)
FT_CONFIG_NAME_NULL = security_error(108)
FT_CONFIG_NAME_INVLD = security_error(109)
FT_CONFIG_PROPS_NULL = security_error(110)
FT_CONFIG_CREATE_FAILED = security_error(120)
FT_CONFIG_UPDATE_FAILED = security_error(121)
FT_CONFIG_DELETE_FAILED = security_error(122)
FT_CONFIG_DELETE_PROPS_FAILED = security_error(123)
FT_CONFIG_READ_FAILED = security_error(124)
FT_CONFIG_ALREADY_EXISTS = security_error(125)
FT_CONFIG_BOOTSTRAP_FAILED = security_error(126)
FT_CONFIG_INITIALIZE_FAILED = security_error(127)
FT_RESOURCE_NOT_FOUND = security_error(128)
FT_CACHE_NOT_CONFIGURED = security_error(129)
FT_CACHE_GET_ERR = security_error(130)
FT_CACHE_PUT_ERR = security_error(131)
FT_CACHE_CLEAR_ERR = security_error(132)
FT_CACHE_FLUSH_ERR = security_error(133)
FT_NULL_CACHE = security_error(134)
FT_APACHE_LDAP_POOL_INIT_FAILED = security_error(135)
FT_CONFIG_JSSE_TRUSTSTORE_NULL = security_error(136)
# 1000's - User Entity Rule and LDAP Errors
USER_SEARCH_FAILED = security_error(1000)
USER_READ_FAILED = security_error(1001)
USER_ADD_FAILED = security_error(1002)
USER_UPDATE_FAILED = security_error(1003)
USER_DELETE_FAILED = security_error(1004)
USER_NOT_FOUND = security_error(1005)
USER_ID_NULL = security_error(1006)
USER_ID_DUPLICATE = security_error(1007)
USER_NULL = security_error(1008)
USER_PW_NULL = security_error(1009)
USER_PW_INVLD_LEN = security_error(1010)
USER_PLCY_VIOLATION = security_error(1011)
USER_PW_PLCY_DEL_FAILED = security_error(1012)
USER_PW_INVLD = security_error(1013)
USER_PW_CHK_FAILED = security_error(1014)
USER_PW_RESET = security_error(1015)
USER_PW_LOCKED = security_error(1016)
USER_PW_EXPIRED = security_error(1017)
USER_PW_MOD_NOT_ALLOWED = security_error(1018)
USER_PW_MUST_SUPPLY_OLD = security_error(1019)
USER_PW_NSF_QUALITY = security_error(1020)
USER_PW_TOO_SHORT = security_error(1021)
USER_PW_TOO_YOUNG = security_error(1022)
USER_PW_IN_HISTORY = security_error(1023)
USER_PW_UNLOCK_FAILED = security_error(1024)
USER_PW_LOCK_FAILED = security_error(1025)
USER_PW_CHANGE_FAILED = security_error(1026)
USER_PW_RESET_FAILED = security_error(1027)
USER_LOCKED_BY_CONST = security_error(1028)
USER_SESS_CREATE_FAILED = security_error(1029)
USER_SESS_NULL = security_error(1030)
USER_ADMIN_NOT_AUTHORIZED = security_error(1031)
USER_CN_NULL = security_error(1032)
USER_SN_NULL = security_error(1033)
USER_PW_PLCY_INVALID = security_error(1034)
USER_OU_INVALID = security_error(1035)
SESS_CTXT_NULL = security_error(1036)
USER_BIND_FAILED = security_error(1037)
# 2000's User-Role assignments
URLE_NULL = security_error(2003)
URLE_ASSIGN_FAILED = security_error(2004)
URLE_DEASSIGN_FAILED = security_error(2005)
URLE_ACTIVATE_FAILED = security_error(2006)
URLE_DEACTIVE_FAILED = security_error(2007)
URLE_ASSIGN_EXIST = security_error(2008)
URLE_ASSIGN_NOT_EXIST = security_error(2009)
URLE_SEARCH_FAILED = security_error(2010)
URLE_ALREADY_ACTIVE = security_error(2011)
URLE_NOT_ACTIVE = security_error(2022)
URLE_ADMIN_CANNOT_ASSIGN = security_error(2023)
URLE_ADMIN_CANNOT_DEASSIGN = security_error(2024)
URLE_ADMIN_CANNOT_GRANT = security_error(2025)
URLE_ADMIN_CANNOT_REVOKE = security_error(2026)
# Temporal Constraint Activation Violations
ACTV_FAILED_DAY = security_error(2050)
ACTV_FAILED_DATE = security_error(2051)
ACTV_FAILED_TIME = security_error(2052)
ACTV_FAILED_TIMEOUT = security_error(2053)
ACTV_FAILED_LOCK = security_error(2054)
ACTV_FAILED_DSD = security_error(2055)
ACTV_FAILED_AUTHN = security_error(2056)
# 3000's - Permission Entity
PERM_SEARCH_FAILED = security_error(3000)
PERM_READ_OP_FAILED = security_error(3001)
PERM_READ_OBJ_FAILED = security_error(3002)
PERM_ADD_FAILED = security_error(3003)
PERM_UPDATE_FAILED = security_error(3004)
PERM_DELETE_FAILED = security_error(3005)
PERM_OP_NOT_FOUND = security_error(3006)
PERM_OBJ_NOT_FOUND = security_error(3007)
PERM_NULL = security_error(3008)
PERM_OPERATION_NULL = security_error(3009)
PERM_OBJECT_NULL = security_error(3010)
PERM_DUPLICATE = security_error(3011)
PERM_GRANT_FAILED = security_error(3012)
PERM_GRANT_USER_FAILED = security_error(3013)
PERM_REVOKE_FAILED = security_error(3024)
PERM_ROLE_EXIST = security_error(3015)
PERM_ROLE_NOT_EXIST = security_error(3016)
PERM_USER_EXIST = security_error(3017)
PERM_USER_NOT_EXIST = security_error(3018)
PERM_ROLE_SEARCH_FAILED = security_error(3019)
PERM_USER_SEARCH_FAILED = security_error(3020)
PERM_SESS_SEARCH_FAILED = security_error(3021)
PERM_BULK_USER_REVOKE_FAILED = security_error(3022)
PERM_BULK_ROLE_REVOKE_FAILED = security_error(3023)
PERM_BULK_ADMINROLE_REVOKE_FAILED = security_error(3024)
PERM_OU_INVALID = security_error(3025)
PERM_OPERATION_NM_NULL = security_error(3026)
PERM_OBJECT_NM_NULL = security_error(3027)
PERM_COMPARE_OP_FAILED = security_error(3028)
PERM_NOT_EXIST = security_error(3029)
# 4000's - Password Policy Entity
PSWD_READ_FAILED = security_error(4000)
PSWD_CREATE_FAILED = security_error(4001)
PSWD_UPDATE_FAILED = security_error(4002)
PSWD_DELETE_FAILED = security_error(4003)
PSWD_SEARCH_FAILED = security_error(4004)
PSWD_NOT_FOUND = security_error(4005)
PSWD_NAME_INVLD_LEN = security_error(4006)
PSWD_QLTY_INVLD_LEN = security_error(4007)
PSWD_QLTY_INVLD = security_error(4008)
PSWD_MAXAGE_INVLD = security_error(4009)
PSWD_MINAGE_INVLD = security_error(4010)
PSWD_MINLEN_INVLD = security_error(4011)
PSWD_INTERVAL_INVLD = security_error(4012)
PSWD_MAXFAIL_INVLD = security_error(4013)
PSWD_MUSTCHG_INVLD = security_error(4014)
PSWD_SAFECHG_INVLD = security_error(4015)
PSWD_ALLOWCHG_INVLD = security_error(4016)
PSWD_HISTORY_INVLD = security_error(4017)
PSWD_GRACE_INVLD = security_error(4018)
PSWD_LOCKOUTDUR_INVLD = security_error(4019)
PSWD_EXPWARN_INVLD = security_error(4020)
PSWD_LOCKOUT_INVLD = security_error(4021)
PSWD_NAME_NULL = security_error(4022)
PSWD_PLCY_NULL = security_error(4023)
PSWD_CONST_VIOLATION = security_error(4024)
# 5000's - RBAC
#   Role Rule and System errors
ROLE_SEARCH_FAILED = security_error(5000)
ROLE_READ_FAILED = security_error(5001)
ROLE_ADD_FAILED = security_error(5002)
ROLE_UPDATE_FAILED = security_error(5003)
ROLE_DELETE_FAILED = security_error(5004)
ROLE_NM_NULL = security_error(5005)
ROLE_NOT_FOUND = security_error(5006)
ROLE_NULL = security_error(5007)
ROLE_USER_ASSIGN_FAILED = security_error(5008)
ROLE_USER_DEASSIGN_FAILED = security_error(5009)
ROLE_LST_NULL = security_error(5010)
ROLE_OCCUPANT_SEARCH_FAILED = security_error(5011)
ROLE_REMOVE_OCCUPANT_FAILED = security_error(5012)
PARENT_ROLE_NULL = security_error(5013)
CHILD_ROLE_NULL = security_error(5014)
ROLE_REMOVE_PARENT_FAILED = security_error(5015)
#   Hierarchical Constraints
HIER_READ_FAILED = security_error(5051)
HIER_ADD_FAILED = security_error(5052)
HIER_UPDATE_FAILED = security_error(5053)
HIER_DELETE_FAILED = security_error(5054)
HIER_NOT_FOUND = security_error(5056)
HIER_REL_INVLD = security_error(5057)
HIER_DEL_FAILED_HAS_CHILD = security_error(5058)
HIER_REL_EXIST = security_error(5059)
HIER_REL_NOT_EXIST = security_error(5060)
HIER_NULL = security_error(5061)
HIER_TYPE_NULL = security_error(5062)
HIER_CANNOT_PERFORM = security_error(5063)
HIER_REL_CYCLIC = security_error(5064)
#   Separation of Duty Relations
SSD_SEARCH_FAILED = security_error(5080)
SSD_READ_FAILED = security_error(5081)
SSD_ADD_FAILED = security_error(5082)
SSD_UPDATE_FAILED = security_error(5083)
SSD_DELETE_FAILED = security_error(5084)
SSD_NM_NULL = security_error(5085)
SSD_NOT_FOUND = security_error(5086)
SSD_NULL = security_error(5087)
SSD_VALIDATION_FAILED = security_error(5088)
DSD_SEARCH_FAILED = security_error(5089)
DSD_READ_FAILED = security_error(5090)
DSD_ADD_FAILED = security_error(5091)
DSD_UPDATE_FAILED = security_error(5092)
DSD_DELETE_FAILED = security_error(5093)
DSD_NM_NULL = security_error(5094)
DSD_NOT_FOUND = security_error(5095)
DSD_NULL = security_error(5096)
DSD_VALIDATION_FAILED = security_error(5097)
# 6000's - LDAP Suffix and Container Entities
CNTR_CREATE_FAILED = security_error(6001)
CNTR_DELETE_FAILED = security_error(6002)
CNTR_NAME_NULL = security_error(6003)
CNTR_NAME_INVLD = security_error(6004)
CNTR_PARENT_NULL = security_error(6005)
CNTR_PARENT_INVLD = security_error(6006)
SUFX_CREATE_FAILED = security_error(6010)
SUFX_DELETE_FAILED = security_error(6011)
SUFX_NAME_NULL = security_error(6012)
SUFX_NAME_INVLD = security_error(6013)
SUFX_DCTOP_NULL = security_error(6014)
SUFX_DCTOP_INVLD = security_error(6015)
# 7000's - Audit Activities
AUDT_BIND_SEARCH_FAILED = security_error(7000)
AUDT_INPUT_NULL = security_error(7001)
AUDT_AUTHZ_SEARCH_FAILED = security_error(7002)
AUDT_MOD_SEARCH_FAILED = security_error(7003)
AUDT_MOD_ADMIN_SEARCH_FAILED = security_error(7004)
AUDT_AUTHN_INVALID_FAILED = security_error(7005)
# 8000's Organizational Unit Rule and System errors
ORG_NULL = security_error(8001)
ORG_TYPE_NULL = security_error(8002)
ORG_READ_FAILED_USER = security_error(8011)
ORG_ADD_FAILED_USER = security_error(8012)
ORG_UPDATE_FAILED_USER = security_error(8013)
ORG_DELETE_FAILED_USER = security_error(8014)
ORG_SEARCH_FAILED_USER = security_error(8015)
ORG_GET_FAILED_USER = security_error(8016)
ORG_NOT_FOUND_USER = security_error(8017)
ORG_NULL_USER = security_error(8018)
ORG_TYPE_NULL_USER = security_error(8019)
ORG_DEL_FAILED_USER = security_error(8020)
ORG_REMOVE_PARENT_FAILED_USER = security_error(8021)
ORG_READ_FAILED_PERM = security_error(8061)
ORG_ADD_FAILED_PERM = security_error(8062)
ORG_UPDATE_FAILED_PERM = security_error(8063)
ORG_DELETE_FAILED_PERM = security_error(8064)
ORG_SEARCH_FAILED_PERM = security_error(8065)
ORG_GET_FAILED_PERM = security_error(8066)
ORG_NOT_FOUND_PERM = security_error(8067)
ORG_NULL_PERM = security_error(8068)
ORG_TYPE_NULL_PERM = security_error(8069)
ORG_DEL_FAILED_PERM = security_error(8070)
ORG_LEN_INVLD = security_error(8071)
ORG_PARENT_NULL = security_error(8072)
ORG_CHILD_NULL = security_error(8073)
ORG_REMOVE_PARENT_FAILED_PERM = security_error(8074)
# 9000's Administrative RBAC
ARLE_SEARCH_FAILED = security_error(9000)
ARLE_READ_FAILED = security_error(9001)
ARLE_ADD_FAILED = security_error(9002)
ARLE_UPDATE_FAILED = security_error(9003)
ARLE_DELETE_FAILED = security_error(9004)
ARLE_NM_NULL = security_error(9005)
ARLE_NOT_FOUND = security_error(9006)
ARLE_NULL = security_error(9007)
ARLE_USER_ASSIGN_FAILED = security_error(9008)
ARLE_USER_DEASSIGN_FAILED = security_error(9009)
ARLE_LST_NULL = security_error(9010)
ARLE_BEGIN_RANGE_NULL = security_error(9011)
ARLE_END_RANGE_NULL = security_error(9011)
ARLE_INVLD_RANGE = security_error(9012)
ARLE_INVLD_RANGE_INCLUSIVE = security_error(9013)
ARLE_ACTIVATE_FAILED = security_error(9014)
ARLE_DEACTIVE_FAILED = security_error(9015)
ARLE_ALREADY_ACTIVE = security_error(9016)
ARLE_NOT_ACTIVE = security_error(9017)
ARLE_USER_SEARCH_FAILED = security_error(9018)
ARLE_PARENT_NULL = security_error(9019)
ARLE_CHILD_NULL = security_error(9020)
ARLE_ASSIGN_EXIST = security_error(9021)
ARLE_ASSIGN_NOT_EXIST = security_error(9022)
ARLE_DEASSIGN_NOT_EXIST = security_error(9023)
ARLE_ASSIGN_FAILED = security_error(9024)
ARLE_DEASSIGN_FAILED = security_error(9025)
ARLE_OCCUPANT_SEARCH_FAILED = security_error(9026)
ARLE_REMOVE_OCCUPANT_FAILED = security_error(9027)
ARLE_REMOVE_PARENT_FAILED = security_error(9028)
# 10000's - Temporal Constraint Validation Error Ids
CONST_INVLD_TEXT = security_error(10001)
CONST_INVLD_FIELD_LEN = security_error(10002)
CONST_TIMEOUT_INVLD = security_error(10003)
CONST_BEGINTIME_INVLD = security_error(10004)
CONST_BEGINTIME_LEN_ERR = security_error(10005)
CONST_ENDTIME_INVLD = security_error(10006)
CONST_ENDTIME_LEN_ERR = security_error(10007)
CONST_BEGINDATE_INVLD = security_error(10008)
CONST_BEGINDATE_NULL = security_error(10009)
CONST_ENDDATE_INVLD = security_error(10010)
CONST_ENDDATE_NULL = security_error(10011)
CONST_DAYMASK_INVLD = security_error(10012)
CONST_DAYMASK_NULL = security_error(10013)
CONST_DESC_LEN_INVLD = security_error(10014)
CONST_NULL_TEXT = security_error(10015)
# 10100's - REST calls through remote Fortress Rest Interface Error Ids
REST_WEB_ERR = security_error(10101)
REST_IO_ERR = security_error(10102)
REST_MARSHALL_ERR = security_error(10103)
REST_UNMARSHALL_ERR = security_error(10104)
REST_GET_FAILED = security_error(10105)
REST_NOT_FOUND_ERR = security_error(10106)
REST_UNKNOWN_ERR = security_error(10107)
REST_FORBIDDEN_ERR = security_error(10108)
REST_UNAUTHORIZED_ERR = security_error(10109)
# 10200's - RBAC Accelerator extended LDAP operation Error Ids
ACEL_CREATE_SESSION_ERR = security_error(10201)
ACEL_DELETE_SESSION_ERR = security_error(10202)
ACEL_CHECK_ACCESS_ERR = security_error(10203)
ACEL_ADD_ROLE_ERR = security_error(10204)
ACEL_DROP_ROLE_ERR = security_error(10205)
# 10300's - LDAP Group operation Error Ids
GROUP_SEARCH_FAILED = security_error(10300)
GROUP_READ_FAILED = security_error(10301)
GROUP_ADD_FAILED = security_error(10302)
GROUP_UPDATE_FAILED = security_error(10303)
GROUP_DELETE_FAILED = security_error(10304)
GROUP_ADD_PROPERTY_FAILED = security_error(10305)
GROUP_DELETE_PROPERTY_FAILED = security_error(10306)
GROUP_NOT_FOUND = security_error(10307)
GROUP_NULL = security_error(10308)
GROUP_USER_ASSIGN_FAILED = security_error(10309)
GROUP_USER_DEASSIGN_FAILED = security_error(10310)
GROUP_NAME_NULL = security_error(10311)
GROUP_NAME_INVLD = security_error(10312)
GROUP_PROTOCOL_INVLD = security_error(10313)

# 20000's - Token Error
TOKEN_DECODE_ERROR = security_error(20001, msg="Token decode failed")
TOKEN_EXPIRED = security_error(20002, msg="Token is expired")

# Rest API Schema
api = Namespace('Error', description='错误')
fuse_error_schema = api.model('FuseError', {
    'errno': fields.Integer(description='错误码', required=True),
    'message': fields.String(description='错误信息')
})

security_exception_schema = api.model('SecurityException', {
    'eid': fields.Integer(description='错误码', required=True),
    'message': fields.String(description='错误信息')
})


@api.errorhandler(FuseError)
@api.marshal_with(fuse_error_schema, code=500)
def handle_fuse_error(error):
    res = {'errno': error.errno}
    if error.msg is not None:
        res['message'] = error.msg
    return res, error.http_exception.code


@api.errorhandler(SecurityException)
@api.marshal_with(security_exception_schema, code=400)
def handle_security_exception(error):
    res = {'eid': error.eid}
    if error.msg is not None:
        res['message'] = error.msg
    return res, error.http_exception.code

